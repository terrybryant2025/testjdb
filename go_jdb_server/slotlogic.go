package main

import (
	"math/rand"
)

// 符号赔付
var payTable = [][]int{
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 200, 200, 500, 500, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000},
	{0, 0, 0, 0, 0, 0, 0, 50, 50, 200, 200, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500},
	{0, 0, 0, 0, 0, 0, 0, 40, 40, 100, 100, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300},
	{0, 0, 0, 0, 0, 0, 0, 30, 30, 40, 40, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240},
	{0, 0, 0, 0, 0, 0, 0, 20, 20, 30, 30, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200},
	{0, 0, 0, 0, 0, 0, 0, 16, 16, 24, 24, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160},
	{0, 0, 0, 0, 0, 0, 0, 10, 10, 20, 20, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
	{0, 0, 0, 0, 0, 0, 0, 8, 8, 18, 18, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80},
	{0, 0, 0, 0, 0, 0, 0, 5, 5, 15, 15, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40},
}

// 符号权重表
var wheelData = [][]int{
	{8, 2, 2, 7, 7, 9, 4, 4, 3, 3, 7, 7, 4, 4, 10, 10, 5, 5, 10, 10, 0, 6, 6, 8, 8, 5, 5, 3, 4, 4, 9, 9, 5, 5, 8, 8, 4, 4, 10, 10, 6, 8, 8, 5, 5, 10, 10, 3, 3, 0, 2, 2, 4, 10, 10, 7, 7, 2, 2, 6, 6, 7, 7, 8, 8, 5, 5, 9, 9, 10, 10, 2, 2, 2, 8, 8, 10, 10, 3, 3, 9, 9, 4, 4, 10, 10, 10, 9, 9, 4, 4, 10, 10, 2, 2, 9, 9, 9, 9, 8},
	{9, 9, 7, 7, 7, 8, 10, 10, 5, 5, 7, 7, 3, 3, 8, 8, 5, 5, 10, 10, 0, 7, 7, 4, 4, 7, 7, 7, 4, 4, 9, 9, 2, 2, 10, 10, 7, 7, 9, 9, 8, 8, 5, 5, 6, 6, 5, 5, 9, 9, 3, 3, 8, 8, 7, 7, 9, 4, 4, 10, 10, 0, 8, 8, 5, 5, 6, 6, 10, 10, 3, 3, 9, 9, 8, 8, 4, 4, 10, 10, 9, 9, 5, 5, 9, 9, 5, 5, 8, 8, 10, 10, 0, 7, 7, 4, 4, 9, 9, 6},
	{3, 3, 10, 10, 6, 7, 9, 9, 5, 5, 7, 7, 3, 3, 10, 10, 5, 5, 9, 9, 0, 7, 7, 4, 4, 7, 7, 7, 4, 4, 9, 9, 2, 2, 10, 10, 7, 7, 9, 9, 8, 8, 5, 5, 6, 6, 5, 5, 9, 9, 3, 3, 8, 8, 7, 7, 9, 4, 4, 10, 10, 0, 8, 8, 5, 5, 6, 6, 10, 10, 8, 8, 5, 5, 6, 6, 9, 9, 4, 4, 8, 8, 10, 10, 9, 9, 5, 5, 8, 8, 10, 10, 2, 7, 7, 4, 4, 7, 7, 9},
	{7, 0, 4, 4, 9, 10, 10, 10, 7, 7, 10, 10, 2, 2, 8, 8, 3, 3, 6, 6, 0, 10, 10, 7, 7, 6, 6, 6, 4, 4, 7, 7, 3, 3, 8, 8, 5, 5, 6, 6, 8, 8, 3, 3, 6, 6, 9, 9, 4, 4, 10, 10, 8, 8, 9, 9, 5, 5, 6, 6, 6, 0, 8, 8, 3, 3, 10, 10, 10, 8, 8, 7, 7, 4, 4, 9, 9, 6, 6, 3, 3, 10, 9, 9, 7, 7, 10, 10, 9, 9, 4, 7, 7, 10, 10, 5, 5, 7, 7, 10},
	{9, 9, 6, 6, 6, 5, 0, 9, 6, 6, 10, 10, 6, 6, 7, 7, 10, 10, 5, 5, 0, 8, 8, 6, 6, 8, 8, 8, 4, 4, 9, 9, 5, 5, 9, 9, 10, 10, 8, 8, 7, 7, 5, 5, 4, 4, 8, 8, 10, 10, 2, 2, 3, 3, 0, 4, 4, 6, 6, 9, 9, 0, 8, 8, 5, 5, 9, 9, 10, 10, 4, 4, 6, 6, 3, 3, 10, 10, 8, 8, 9, 9, 10, 10, 5, 5, 0, 9, 9, 4, 4, 10, 10, 7, 7, 2, 2, 6, 6, 6, 6, 6},
	{10, 5, 5, 8, 8, 0, 5, 5, 2, 2, 8, 8, 10, 6, 6, 6, 10, 10, 9, 9, 0, 10, 10, 3, 3, 6, 6, 6, 4, 4, 7, 7, 3, 3, 8, 8, 9, 9, 6, 6, 8, 8, 5, 5, 6, 6, 5, 5, 10, 10, 9, 9, 8, 8, 7, 7, 2, 2, 8, 8, 7, 7, 0, 6, 6, 5, 5, 8, 8, 4, 4, 3, 3, 10, 10, 8, 8, 9, 9, 2, 2, 10, 10, 4, 4, 9, 9, 2, 7, 7, 4, 4, 4, 6, 6, 5, 5, 6, 6, 6},
}

func getRandomData(CanWin bool) [][]int {
	rows, cols := 6, 5
	total := rows * cols
	symbols := wheelData[0]

	data := make([]int, 0, total)
	countMap := make(map[int]int)
	zeroLimit := make([]int, cols)

	if CanWin {
		// ✅ 允许有一个主符号 ≥8
		// 1. 随机选一个主符号（非0）
		main := -1
		for {
			candidate := symbols[rand.Intn(len(symbols))]
			if candidate != 0 {
				main = candidate
				break
			}
		}
		mainCount := rand.Intn(5) + 8 // [8,12]
		for i := 0; i < mainCount; i++ {
			data = append(data, main)
		}
		countMap[main] = mainCount
	}

	// 2. 填充剩余格子
	for len(data) < total {
		val := symbols[rand.Intn(len(symbols))]

		// 不能超出限制
		limit := 7
		if CanWin {
			if countMap[val] >= limit && (countMap[val] > 0 || val != 0) {
				continue
			}
		} else {
			if countMap[val] >= limit {
				continue
			}
		}

		// 限制每列最多一个0（预测列）
		if val == 0 {
			idx := len(data)
			col := idx % cols
			if zeroLimit[col] >= 1 {
				continue
			}
			zeroLimit[col]++
		}

		data = append(data, val)
		countMap[val]++
	}

	// 3. 洗牌
	rand.Shuffle(len(data), func(i, j int) {
		data[i], data[j] = data[j], data[i]
	})

	// 4. 构造二维数组 [row][col]
	grid := make([][]int, rows)
	for i := 0; i < rows; i++ {
		grid[i] = make([]int, cols)
	}
	for idx, val := range data {
		col := idx % cols
		row := idx / cols
		grid[row][col] = val
	}

	return grid
}
